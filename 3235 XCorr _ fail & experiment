///O(n^2)풀이 -> 최대 O(n log n)을 맞추기위해 때려넣고 생각해보자
#include <bits/stdc++.h>
#define MAX 300000
using namespace std;
struct tuple_{
    int idx;
    int num;
};
tuple_ X[MAX+5];
tuple_ Y[MAX+5];
int T[MAX+5];
int nx;
int ny;
int st,ed;
int cnt;
int ans;
void input(){
    freopen("in.txt","r",stdin);
    scanf("%d",&nx);
    int i;
    for(i=0;i<nx;i++){
        scanf("%d %d",&X[i].idx,&Y[i].num);
    }
    scanf("%d",&ny);
    for(i=0;i<ny;i++){
        scanf("%d %d",&Y[i].idx,&Y[i].num);
    }
    scanf("%d%d",&st,&ed);
    for(i=1;i<=(ed-st+1);i++){
        T[i-1]=st+(i-1); ///T[i]=-1,0,1
    }
    cnt=ed-st+1; ///3
}
int main(){
    input();
    int i;
    int j;
    int t;///없앨만큼의 공간 저장
    for(i=0;i<cnt;i++){
        if(T[i]==0){
            for(j=0;j<cnt;j++){
                ans+=X[j].num*Y[j].num;
            }
        }else if(T[i]<0){
            t=T[i];
            for(j=0;j<cnt-abs(t);j++){
                ans+=X[j+abs(t)].num*Y[j].num;
            }
        }else if(T[i]>0){
            t=T[i];
            for(j=0;j<cnt-abs(t);j++){
                //int k=0;
                ans+=X[j].num*Y[j+abs(t)].num;
                //k++;
            }
        }
    }
    printf("%d\n",ans);
    return 0;
}

/**
비록, 실패했지만
이것으로 정답을 찾을 방법을 구현해냈다.

HINT! _ O(N log n)
1) lower_bound() function
2) binary search Algorithm
3) STL vector or others...

福!
**/
